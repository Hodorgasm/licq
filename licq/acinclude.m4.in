## -*- mode: m4 -*-
dnl Copyright (c) 1998 N. D. Bellamy
dnl Copyright (c) 1999,2000 Dirk Mueller <dirk@licq.org>

AC_DEFUN([AC_CHECK_SOCKS5],
[
  AC_MSG_CHECKING(whether to enable SOCKS5 support)

  WITH_SOCKS5="no"
  SOCKS_LIBS=""
  SOCKS_LIBDIR=""
  SOCKS_INCDIR=""
  
  AC_ARG_ENABLE(
    socks5,
    [  --enable-socks5         enable SOCKS5 firewall support],
    WITH_SOCKS5=yes)

  AC_ARG_WITH(
    socks5-inc,
    [  --with-socks5-inc=PATH  include path for SOCKS5 headers],
    socks_incdir="$withval", socks_incdir="no")

  AC_ARG_WITH(
    socks5-lib,
    [  --with-socks5-lib=PATH  library path for SOCKS5 libraries],
    socks_libdir="$withval", socks_libdir="no")

  if test "$WITH_SOCKS5" = "no"; then
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT(yes)
    WITH_SOCKS5="no"

    dnl Init
    if test "$socks_libdir" != "no"; then
      BACKUP_LDFLAGS="$LDFLAGS"
      LDFLAGS="$LDFLAGS -L$socks_libdir"
    fi  
    if test "$socks_incdir" != "no"; then
      BACKUP_CPPFLAGS="$CPPFLAGS"
      CPPFLAGS="$CPPFLAGS -I$socks_incdir"
    fi 

    SOCKS_LIBS=""
    SOCKS_INCDIR=""

    licq_socks_optlen=unknown

    AC_CHECK_LIB(socks5, SOCKSinit, SOCKS_LIBS="-lsocks5")
    if test -z "$SOCKS_LIBS"; then
      AC_CHECK_LIB(socks, SOCKSinit, SOCKS_LIBS="-lsocks")
    fi

    if test -n "$SOCKS_LIBS"; then
       if test "$socks_libdir" != "no"; then
          SOCKS_LIBDIR="-L$socks_libdir"
       fi
      AC_CHECK_HEADER(socks.h,
        [if test "$socks_incdir" == "no"; then
           SOCKS_INCDIR="-Wno-implicit"
        else
           SOCKS_INCDIR="-I$socks_incdir -Wno-implicit"
         fi
         WITH_SOCKS5="yes"
         
        ])
      if test -n "$SOCKS_INCDIR"; then 
         AC_DEFINE(USE_SOCKS5, 1, [use socks5 support])

         AC_MSG_CHECKING(SOCKS getsockopt's optlen type)
         AC_TRY_COMPILE(
           [ #include <stdlib.h>
             #include <socks.h>
           ],
           [ getsockopt(0,0,0,(void *)0,(socklen_t) 0) ],
           licq_socks_optlen=socklen_t,
           [AC_TRY_COMPILE(
             [ #include <stdlib.h>
               #include <socks.h>
             ],
             [ getsockopt(0,0,0,(void *)0,(int) 0)],
             licq_socks_optlen=int,
             licq_socks_optlen=unknown)
           ]
         )  
         AC_MSG_RESULT($licq_socks_optlen)
         if test $licq_socks_optlen = "int"; then
           AC_DEFINE(SOCKS5_OPTLEN, int, [getsockopt optlen parameter type])
         else 
           if test $licq_socks_optlen = "socklen_t"; then
             AC_DEFINE(SOCKS5_OPTLEN,socklen_t, [getsockopt optlen parameter type])
           fi
         fi
      fi

    fi  
    
    dnl restore flags
    if test "$socks_libdir" != "no"; then
        LDFLAGS="$BACKUP_LDFLAGS"
    fi
    if test "$socks_incdir" != "no"; then
      CPPFLAGS="$BACKUP_CPPFLAGS"
    fi
  fi

  dnl Substitute these even if they're null, so as not to mess up makefiles
  AC_SUBST(SOCKS_LIBS)
  AC_SUBST(SOCKS_LIBDIR)
  AC_SUBST(SOCKS_INCDIR)
])

dnl Check if struct tm contains long int tm_gmtoff
AC_DEFUN([LICQ_CHECK_GMTOFF],
[AC_CACHE_CHECK(for tm_gmtoff, licq_tm_gmtoff,
  [ AC_TRY_COMPILE([
#include <time.h>
], [
long int foo;
struct tm bar;
foo = bar.tm_gmtoff;
], [
  licq_tm_gmtoff=yes
], [
  licq_tm_gmtoff=no
])
])
if test $licq_tm_gmtoff = yes; then
  AC_DEFINE(USE_GMTOFF, 1, [Define if struct tm has gmtoff])
fi
])

dnl Check if long timezone is somewhere defined (i.e. AIX)
AC_DEFUN([LICQ_CHECK_TIMEZONE],
  [AC_CACHE_CHECK(for extern long timezone, licq_extern_timezone,
    [ AC_TRY_LINK([
#include <time.h>
], [
  long foo;
  foo = timezone;
], [
  licq_extern_timezone=yes
], [
  licq_extern_timezone=no
])
])
if test $licq_extern_timezone = yes; then
  AC_DEFINE(USE_TIMEZONE, 1, [Define if global variable timezone exists])
fi
])


AC_DEFUN([_AM_PATH_GPGME_CONFIG],
[ AC_ARG_WITH(gpgme-prefix,
            AC_HELP_STRING([--with-gpgme-prefix=PFX],
                           [prefix where GPGME is installed (optional)]),
     gpgme_config_prefix="$withval", gpgme_config_prefix="")
  if test "x$gpgme_config_prefix" != x ; then
      GPGME_CONFIG="$gpgme_config_prefix/bin/gpgme-config"
  fi
  AC_PATH_PROG(GPGME_CONFIG, gpgme-config, no)

  gpgme_version=`$GPGME_CONFIG --version`
  gpgme_version_major=`echo $gpgme_version | \
               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
  gpgme_version_minor=`echo $gpgme_version | \
               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
  gpgme_version_micro=`echo $gpgme_version | \
               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`
])

dnl AM_PATH_GPGME([MINIMUM-VERSION,
dnl               [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND ]]])
dnl Test for libgpgme and define GPGME_CFLAGS and GPGME_LIBS.
dnl
AC_DEFUN([LICQ_CHECK_GPGME],
[ AC_REQUIRE([_AM_PATH_GPGME_CONFIG])dnl
  tmp=ifelse([$1], ,1:0.4.2,$1)
  if echo "$tmp" | grep ':' >/dev/null 2>/dev/null ; then
     req_gpgme_api=`echo "$tmp"     | sed 's/\(.*\):\(.*\)/\1/'`
     min_gpgme_version=`echo "$tmp" | sed 's/\(.*\):\(.*\)/\2/'`
  else
     req_gpgme_api=0
     min_gpgme_version="$tmp"
  fi

  AC_MSG_CHECKING(for GPGME - version >= $min_gpgme_version)
  ok=no
  if test "$GPGME_CONFIG" != "no" ; then
    req_major=`echo $min_gpgme_version | \
               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/'`
    req_minor=`echo $min_gpgme_version | \
               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/'`
    req_micro=`echo $min_gpgme_version | \
               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/'`
    if test "$gpgme_version_major" -gt "$req_major"; then
        ok=yes
    else
        if test "$gpgme_version_major" -eq "$req_major"; then
            if test "$gpgme_version_minor" -gt "$req_minor"; then
               ok=yes
            else
               if test "$gpgme_version_minor" -eq "$req_minor"; then
                   if test "$gpgme_version_micro" -ge "$req_micro"; then
                     ok=yes
                   fi
               fi
            fi
        fi
    fi
  fi
  if test $ok = yes; then
     # If we have a recent GPGME, we should also check that the
     # API is compatible.
     if test "$req_gpgme_api" -gt 0 ; then
        tmp=`$GPGME_CONFIG --api-version 2>/dev/null || echo 0`
        if test "$tmp" -gt 0 ; then
           if test "$req_gpgme_api" -ne "$tmp" ; then
             ok=no
           fi
        fi
     fi
  fi
  if test $ok = yes; then
    GPGME_CFLAGS=`$GPGME_CONFIG --cflags`
    GPGME_LIBS=`$GPGME_CONFIG --libs`
    AC_MSG_RESULT(yes)
    LIBS="$LIBS $GPGME_LIBS"
    CPPFLAGS="$CPPFLAGS $GPGME_CFLAGS"
    AC_DEFINE_UNQUOTED(HAVE_LIBGPGME, 1, [Define if GPGME is available])
    WITH_GPGME="yes"
  else
    AC_MSG_RESULT(no)
    WITH_GPGME="no"
  fi
])

AC_DEFUN([LICQ_OLD_CHECK_GPGME],
[
  AC_MSG_CHECKING(if GPGME support is desired)

  AC_ARG_ENABLE(
    gpgme,
    [  --disable-gpgme         disable GPGME support],
    WITH_GPGME="$enableval", WITH_GPGME="yes")

    if test "$WITH_GPGME" = "yes"; then
      AC_MSG_RESULT(yes)
      AC_CHECK_LIB(gpgme,gpgme_check_version, 
        [
          dnl Action if found...
          LIBS="$LIBS -lgpgme"
          AC_DEFINE_UNQUOTED(HAVE_LIBGPGME, 1, [Define if GPGME is available])
        ],
        [
          dnl Action if not found...
          WITH_GPGME="no"
        ])
    else
      AC_MSG_RESULT(no)
    fi
])

AC_DEFUN([LICQ_CHECK_OPENSSL],
[
  AC_MSG_CHECKING(if OpenSSL support is desired)

  AC_ARG_ENABLE(
    openssl,
    [  --disable-openssl       disable OpenSSL support],
    WITH_OPENSSL="$enableval", WITH_OPENSSL="yes")

  AC_ARG_WITH(
    openssl-inc,
    [  --with-openssl-inc=PATH  include path for OpenSSL headers],
    openssl_incdir="$withval", openssl_incdir="no")

  AC_ARG_WITH(
    openssl-lib,
    [  --with-openssl-lib=PATH  library path for OpenSSL libraries],
    openssl_libdir="$withval", openssl_libdir="no")

  if test "$WITH_OPENSSL" = "no"; then
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT(yes)

    dnl AC_MSG_CHECKING(for the OpenSSL headers)
    temp=$CPPFLAGS
    dnl Extra search path for kerberos includes, Redhat 9 needs this for OpenSSL
    if test -d "/usr/kerberos/include"; then
      kerberos_incdir="-I/usr/kerberos/include"
      CPPFLAGS="$CPPFLAGS $kerberos_incdir"
    fi

    if test "$openssl_incdir" != "no"; then
      CPPFLAGS="$CPPFLAGS -I$openssl_incdir"
    fi
    AC_CHECK_HEADER(openssl/ssl.h, WITH_OPENSSL="yes", WITH_OPENSSL="no")
    if test "$WITH_OPENSSL" = "no"; then
      CPPFLAGS="$temp"
    fi

    if test "$WITH_OPENSSL" = "yes"; then
      dnl AC_MSG_CHECKING(for the OpenSSL library)
      temp="$LIBS"
      if test "$openssl_libdir" != "no"; then
        LIBS="$LIBS -L$openssl_libdir"
      fi
      AC_CHECK_LIB(crypto, DH_free)
      if test "$ac_cv_lib_crypto_DH_free" = "yes"; then
          AC_CHECK_LIB(ssl, SSL_new, WITH_OPENSSL="yes", WITH_OPENSSL="no")
      else
          WITH_OPENSSL="no"
      fi
      if test "$WITH_OPENSSL" = "no"; then
        LIBS="$temp"
      else
        LIBS="-lssl $LIBS"
      fi
    fi

    AC_MSG_CHECKING(if OpenSSL support can be enabled)
    if test "$WITH_OPENSSL" = "yes"; then
      AC_DEFINE_UNQUOTED(USE_OPENSSL, 1, [Define if OpenSSL is available])
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
  fi
])


