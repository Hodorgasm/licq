## -*- mode: m4 -*-
dnl Copyright (c) 1998 N. D. Bellamy
dnl Copyright (c) 1999,2000 Dirk Mueller <dirk@licq.org>

AC_DEFUN(AC_CHECK_SOCKS5,
[
  AC_MSG_CHECKING(whether to enable SOCKS5 support)

  WITH_SOCKS5="no"
  SOCKS_LIBS=""
  SOCKS_LIBDIR=""
  SOCKS_INCDIR=""
	
  AC_ARG_ENABLE(
    socks5,
    [  --enable-socks5         enable SOCKS5 firewall support],
    WITH_SOCKS5=yes)

  AC_ARG_WITH(
    socks5-inc,
    [  --with-socks5-inc=PATH  include path for SOCKS5 headers],
    socks_incdir="$withval", socks_incdir="no")

  AC_ARG_WITH(
    socks5-lib,
    [  --with-socks5-lib=PATH  library path for SOCKS5 libraries],
    socks_libdir="$withval", socks_libdir="no")

  if test "$WITH_SOCKS5" = "no"; then
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT(yes)

    if test "$socks_libdir" = "no"; then
      dnl AC_CHECK_LIB(socks5, SOCKSconnect, SOCKS_LIBS="-lsocks5")
      SOCKS_LIBS="-lsocks5"
    else
    	AC_MSG_CHECKING(where to look for the SOCKS5 library)
      SOCKS_LIBS="-lsocks5"
      SOCKS_LIBDIR="-L$socks_libdir"
      AC_MSG_RESULT($socks_libdir)
    fi

    if test "$socks_incdir" = "no"; then
      AC_CHECK_HEADER(socks.h)
      SOCKS_INCDIR="-Wno-implicit"
    else
    	AC_MSG_CHECKING(where to look for the SOCKS5 headers)
      SOCKS_INCDIR="-I$socks_incdir -Wno-implicit"
      AC_MSG_RESULT($socks_incdir)
    fi
    AC_DEFINE(USE_SOCKS5)
  fi

  dnl Substitute these even if they're null, so as not to mess up makefiles

  AC_SUBST(SOCKS_LIBS)
  AC_SUBST(SOCKS_LIBDIR)
  AC_SUBST(SOCKS_INCDIR)
])

dnl Check if the type socklen_t is defined anywhere
AC_DEFUN(AC_C_SOCKLEN_T,
[AC_CACHE_CHECK(for socklen_t, ac_cv_c_socklen_t,
[
  AC_TRY_COMPILE([
    #include <sys/types.h>
    #include <sys/socket.h>
  ],[
    socklen_t foo;
  ],[
    ac_cv_c_socklen_t=yes
  ],[
    ac_cv_c_socklen_t=no
  ])
])

if test $ac_cv_c_socklen_t = no; then
  AC_DEFINE(socklen_t, int)
fi

])

dnl Check if struct tm contains long int tm_gmtoff
AC_DEFUN(LICQ_CHECK_GMTOFF,
[AC_CACHE_CHECK(for tm_gmtoff, licq_tm_gmtoff,
  [ AC_TRY_COMPILE([
#include <time.h>
], [
long int foo;
struct tm bar;
foo = bar.tm_gmtoff;
], [
  licq_tm_gmtoff=yes
], [
  licq_tm_gmtoff=no
])
])
if test $licq_tm_gmtoff = yes; then
  AC_DEFINE(USE_GMTOFF)
fi
])

dnl Check if long timezone is somewhere defined (i.e. AIX)
AC_DEFUN(LICQ_CHECK_TIMEZONE,
  [AC_CACHE_CHECK(for extern long timezone, licq_extern_timezone,
    [ AC_TRY_LINK([
#include <time.h>
], [
  long foo;
  foo = timezone;
], [
  licq_extern_timezone=yes
], [
  licq_extern_timezone=no
])
])
if test $licq_extern_timezone = yes; then
  AC_DEFINE(USE_TIMEZONE)
fi
])


AC_DEFUN(LICQ_CHECK_OPENSSL,
[
  AC_MSG_CHECKING(if OpenSSL support is desired)

  AC_ARG_ENABLE(
    openssl,
    [  --disable-openssl       disable OpenSSL support],
    WITH_OPENSSL="$enableval", WITH_OPENSSL="yes")

  AC_ARG_WITH(
    openssl-inc,
    [  --with-openssl-inc=PATH  include path for OpenSSL headers],
    openssl_incdir="$withval", openssl_incdir="no")

  AC_ARG_WITH(
    openssl-lib,
    [  --with-openssl-lib=PATH  library path for OpenSSL libraries],
    openssl_libdir="$withval", openssl_libdir="no")

  if test "$WITH_OPENSSL" = "no"; then
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT(yes)

    dnl AC_MSG_CHECKING(for the OpenSSL headers)
    temp=$CPPFLAGS
    if test "$openssl_incdir" != "no"; then
      CPPFLAGS="$CPPFLAGS -I$openssl_incdir"
    fi
    AC_CHECK_HEADER(openssl/des.h, WITH_OPENSSL="yes", WITH_OPENSSL="no")
    if test "$WITH_OPENSSL" = "no"; then
      CPPFLAGS="$temp"
    fi

    dnl AC_MSG_CHECKING(for the OpenSSL library)
    temp="$LIBS"
    if test "$openssl_libdir" != "no"; then
      LIBS="$LIBS -L$openssl_libdir"
    fi
    AC_CHECK_LIB(crypto, DH_free)
    if test "$ac_cv_lib_crypto_DH_free" = "yes"; then
        LIBS="$LIBS -lcrypto"
        AC_CHECK_LIB(ssl, SSL_new, WITH_OPENSSL="yes", WITH_OPENSSL="no")
    else
        WITH_OPENSSL="no"
    fi
    if test "$WITH_OPENSSL" = "no"; then
      LIBS="$temp"
    else
      LIBS="$LIBS -lssl -lcrypto"
    fi

    if test "$WITH_OPENSSL" = "yes"; then
      AC_DEFINE(USE_OPENSSL)
    fi
  fi
])


