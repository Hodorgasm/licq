dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/licqgui.h)

AC_CANONICAL_SYSTEM
AC_ARG_PROGRAM

dnl All versioning is done via thes following line
AM_INIT_AUTOMAKE(Licq-Qt-GUI, 0.71)
AM_CONFIG_HEADER(config.h)

dnl Chuck #defines for PACKAGE and VERSION into config.h
AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
AC_DEFINE_UNQUOTED(INT_VERSION,$INT_VERSION)

dnl Also substitute PACKAGE and VERSION in the AC_OUTPUT files
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
dnl AC_PROG_CXX_FNO_RTTI
AC_PROG_CXXCPP
AC_ISC_POSIX
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PATH_PROG(PROG_STRIP,strip,:)
AC_PATH_PROG(PROG_SIZE,size,:)

dnl libtool stuff
AC_LIBTOOL_DLOPEN
AC_DISABLE_STATIC
AM_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(errno.h getopt.h sys/time.h locale.h)
AC_HEADER_TIME
AC_SYS_ERRLIST

dnl Check for X and extra X libs needed
AC_PATH_XTRA
if test "$no_x" = yes; then
  AC_MSG_ERROR(You need to have the X11 libraries and headers installed)
fi

dnl solaris has broken x11 headers, lets check for them
LICQ_CHECK_X11HEADERS

XSS_LIBS="no"
AC_CHECK_X_LIB(Xext, XScreenSaverRegister,[XSS_LIBS=""],[], [-lX11 -lXext -lm])
AC_CHECK_X_LIB(Xss, XScreenSaverRegister,[XSS_LIBS="-lXss"],[],[-lX11 -lXext -lm])
if test \! "$XSS_LIBS" = "no"; then
  AC_CHECK_X_HEADER(X11/extensions/scrnsaver.h,[AC_DEFINE(USE_SCRNSAVER)])
else
  dnl Don't include the screensaver libs if we can't find the header.
  XSS_LIBS=""
fi
AC_SUBST(XSS_LIBS)

dnl Checks for library functions.
AC_CHECK_LIB(xnet,inet_addr)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_FUNCS(inet_addr inet_aton strerror)

dnl Check for QT
AC_PATH_QT
AC_PATH_QT_LIB

if test "$have_qt_lib" = no; then
  AC_MSG_ERROR([

I can't find the QT libraries. It is recommended to set the QTDIR environment
variable.

Install the QT libraries, or if you have them installed, override this check
with the --with-qt-libraries argument, and I'll take your word for it.
])

fi

AC_PATH_QT_INC
if test "$have_qt_inc" = no; then
  AC_MSG_ERROR([

I can't find the QT header files.

Install the QT development package, or if you have them installed, override
this check with the --with-qt-includes argument, and I'll take your word for
it.
])

fi

dnl Check for QT version
AC_MSG_CHECKING(for QT >= 2.0)
if test ! -r $ac_cv_header_qtinc/qstyle.h; then
  AC_MSG_ERROR([

    $ac_cv_header_qtinc/qstyle.h does not exist.
    Sorry, but you need QT version 2.0 or higher to compile the Qt gui plugin.
  ])
else
  AC_MSG_RESULT(yes)
fi

AC_PATH_QT_MOC
AC_PATH_QT_FINDTR
AC_PATH_QT_MSGTOQM
AC_PATH_QT_MERGETR

AC_PATH_KDE
if test "$have_kde" = yes; then
   AC_DEFINE(USE_KDE)
   KDE_LIBS="-lkdeui -lkdecore -lkfile"
   dnl -lkfm -lkab
   dnl QTKDE_MOC="./kdemoc.sh $MOC"
   dnl GUINAME="kde-gui"
   AC_SUBST(KDE_LIBS)
fi

dnl Switch to C++ mode and check for needed C++ headers
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

AC_CHECK_HEADER(vector.h,,
  AC_MSG_ERROR(You need to have the libstdc++ headers installed))

AC_LANG_RESTORE

dnl spoofing compile option
AC_ARG_ENABLE(spoofing,
  [  --enable-spoofing       Enable UIN spoofing. ],
  AC_DEFINE(USE_SPOOFING))

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_SOCKLEN_T

AC_OUTPUT(
  po/Makefile \
  src/Makefile \
  share/Makefile \
  Makefile)

echo ""
echo "Please remember to use GNU make, often installed as gmake."
if test "$enable_spoofing" = yes; then
  echo "Spoofing is enabled"
else
  echo "Spoofing is disabled"
fi
if test "$have_kde" = yes; then
  echo "KDE 2 (CVS):  $ac_kde_includes"
else
  echo "KDE 2.0 (CVS) support is disabled."
fi
echo "Qt includes:  $ac_cv_header_qtinc"
echo "Qt libraries: $ac_cv_lib_qtlib"
echo "Qt moc:       $MOC"
echo ""

