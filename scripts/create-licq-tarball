#!/bin/bash
#
# Script to create a source tarball from Licq's svn repository.
# Latest version: http://svn.licq.org/svn/trunk/scripts/
#
# Copyright (c) 2007-2008 Erik Johansson <erijo@licq.org>
# Distributed under the terms of the GNU GPL version 2.
#

### DEFAULT SETTINGS ###

# Detect gnutar if available (BSD tar does not support --owner)
TAR=$(which gnutar)
if [ -z "$TAR" ]; then
    TAR=tar
fi

# Where to save the tarball(s)
TARDIR="."

# What to name the tarball.
# BRANCH is replaced with the name of the exported branch.
# REV is replaced with the svn revision.
# Note: Don't add .tar.gz or .tar.bz2
TARNAME="licq-1.3.9~BRANCH.rREV"
#TARNAME="licq-1.3.9-rc1"

# Archives to create (true or false)
CREATE_GZ=false
CREATE_BZ2=false

# Sign archives using default GPG key (true or false)
SIGN=false

# Set extra version to exported revision
EXTRA_VERSION=true

# What revision to export
LICQREV="HEAD"

# Ownership of files in tarball
OWNER="nobody"
GROUP="nogroup"

# Licq repository
REPO="http://svn.licq.org/svn"

# Default branch
BRANCH="trunk"

### END SETTINGS ###

# Prints the usage
function usage()
{
    echo "Usage: $0 (-g | -b) [OPTION]..."
    echo "  -h, --help   This message"
    echo "  -t tag       Tag to create tarball from"
    echo "  -d branch    Branch to create tarball from"
    echo "  -r rev       Create tarball from revision rev (default: ${LICQREV})"
    echo "  -o dir       Save tarball in directory dir (default: ${TARDIR})"
    echo "  -n name      Name the tarball name (default: ${TARNAME})"
    echo "               BRANCH is replaced with the name of the exported branch"
    echo "               REV is replaced with the svn revision"
    echo "  -e           Don't set extra version (never done for tags)"
    echo "  -g, --gzip   Create a tar.gz archive"
    echo "  -b, --bzip2  Create a tar.bz archive"
    echo "  -s, --sign   Sign archive(s) with default GPG key"
    echo ""
    echo "The tarball will by by default be created from ${BRANCH}. This can"
    echo "be changed to a tag with -t (e.g -t licq-1.3.8) or to a branch"
    echo "with -d (e.g. -d 1.3-stable)."
    echo ""
    echo "To create a release:"
    echo "$0 --bzip2 --gzip --sign -t licq-1.3.9 -n licq-1.3.9"
}

if [ $# -eq 0 ]; then
    echo "$0: Missing required argument (-g and/or -b)"
    echo "Try \`$0 --help' for more information"
    exit 2
fi

# Parse command line options
args=$(getopt -n "$0" -o h,r:,t:,d:o:,n:,e,g,b,s -l help,gzip,bzip2,sign -- $*)
if [ $? -ne 0 ]; then
    echo ""
    usage
    exit 1
fi

set -- $args
while [ $# -gt 0 ]; do
    case $1 in
	-h|--help) usage; exit 0 ;;
	-r) LICQREV=$(eval echo $2); shift ;;
	-t) BRANCH="tags/$(eval echo $2)"; EXTRA_VERSION=false; shift ;;
	-d) BRANCH="branches/$(eval echo $2)"; shift ;;
	-o) TARDIR=$(eval echo $2); shift ;;
	-n) TARNAME=$(eval echo $2); shift ;;
	-e) EXTRA_VERSION=false ;;
	-g|--gzip) CREATE_GZ=true ;;
	-b|--bzip2) CREATE_BZ2=true ;;
	-s|--sign) SIGN=true ;;
	--) ;;
	*) echo "$0: unknown option '$1'"; exit 1 ;;
    esac
    shift
done

if ! $CREATE_GZ && ! $CREATE_BZ2 ; then
    echo "$0: You must choose to create a gzip and/or bzip2 archive"
    echo ""
    usage
    exit 1
fi

# Remove workdir
function cleanup()
{
   if [ -n "${TMPDIR}" ]; then
     echo "Removing ${TMPDIR}"
     rm -rf "${TMPDIR}"
     TMPDIR=""
   fi
}

# Echos "$1 failed" or "failed" and then exits.
function failed()
{
   if [ -z "$1" ]; then
      echo "failed"
   else
      echo "$1 failed"
   fi
   if [ -r "${TMPFILE}" ]; then
      cat "${TMPFILE}"
   fi
   cleanup
   exit 1
}

function abort()
{
   echo "Aborted by user"
   cleanup
   exit 1
}

function run()
{
   "$@" &> "${TMPFILE}" || failed
   rm -f "${TMPFILE}"
}

trap abort SIGHUP SIGINT SIGQUIT

# Workdir/file
TMPDIR=$(mktemp -d licq.XXXX) || failed "mktemp -d"
TMPFILE="${TMPDIR}/.cmd.out"

SVNREV=$(svn info -r"${LICQREV}" "${REPO}" | grep "^Revision:" | awk '{print $2}') || failed

function expand_name()
{
    local name="$1"
    local branch="${BRANCH#*/}"
    name="${name//BRANCH/${branch}}"
    name="${name//REV/${SVNREV}}"
    echo "${name}"
}

DIRNAME="$(expand_name "${TARNAME}")"
TARNAME="$(expand_name "${TARNAME}")"
LICQDIR="${TMPDIR}/${DIRNAME}"

function exit_if_exists()
{
   if [ -e "$1" ]; then
      echo "$1 already exists"
      cleanup
      exit 1
   fi
}

function svnexport()
{
   local source="${REPO}/${BRANCH}/$1@${SVNREV}"
   local dest="${LICQDIR}/$2"
   local skip_missing="${3:-false}"

   echo -n "Exporting ${BRANCH}/$1 (r${SVNREV})... "
   if ${skip_missing} && ! svn info "${source}" &> /dev/null; then
       echo "not found, skipping"
       return
   fi

   run svn export --ignore-externals -r"${SVNREV}" "${source}" "${dest}"
   echo "done"
}

function has_file()
{
   test -e "${LICQDIR}/$1"
}

function makecvs()
{
   echo -n "Running make -f $1/Makefile.cvs... "
   run make -C "${LICQDIR}/$1" -f "Makefile.cvs"
   rm -rf "${LICQDIR}/$1/autom4te.cache"
   rm -f "${LICQDIR}/$1/Makefile.cvs"
   echo "done"
}

${CREATE_GZ}  && exit_if_exists "${TARDIR}/${TARNAME}.tar.gz"
${CREATE_BZ2} && exit_if_exists "${TARDIR}/${TARNAME}.tar.bz2"

svnexport "licq" ""
if has_file "Makefile.cvs"; then
   svnexport "admin" "admin"
   makecvs "."
fi

# Remove symbolic links in plugins dir
run find "${LICQDIR}/plugins" -type l -delete

# List of plugins that should be exported. Plugins that no longer are on trunk
# should be listed in OLD_PLUGINS so that this script can continue to work with
# older releases (e.g. the stable branches).
PLUGINS="aosd auto-reply console forwarder jabber licqweb msn osd qt4-gui rms"
OLD_PLUGINS="email qt-gui"

for plugin in ${PLUGINS} ${OLD_PLUGINS}; do
   svnexport "${plugin}" "plugins/${plugin}" true
   if has_file "plugins/${plugin}/Makefile.cvs"; then
      if ! has_file "plugins/${plugin}/admin"; then
         svnexport "admin" "plugins/${plugin}/admin"
      fi
      makecvs "plugins/${plugin}"
   fi
done

if ${EXTRA_VERSION}; then
   echo -n "Setting extra version (to -r${SVNREV})..."
   for file in $(find "${LICQDIR}" -name version.cmake -o -name LicqVersion.cmake); do
      sed -i -r -e "s/^(set\(.*_VERSION_EXTRA).*\)/\1 \"-r${SVNREV}\"\)/g" ${file}
   done
   echo "done"
fi

# Cleanup
run find "${LICQDIR}" -name Makefile.common -delete

echo "Creating tarball ${TARNAME}.tar"
${TAR} --owner "${OWNER}" --group "${GROUP}" -C "${TMPDIR}" \
    -cf "${TMPDIR}/${TARNAME}.tar" "${DIRNAME}" || failed

function sign()
{
   if ${SIGN}; then
      echo "Signing $1"
      gpg --sign --armor --detach-sign --output "$1.sign" "$1" || failed "signing"
   fi
}

if ${CREATE_GZ}; then
   echo -n "Creating ${TARDIR}/${TARNAME}.tar.gz... "
   cp "${TMPDIR}/${TARNAME}.tar" "${TARDIR}" || failed "copy tarball"
   gzip --best "${TARDIR}/${TARNAME}.tar" || failed
   echo "done"

   sign "${TARDIR}/${TARNAME}.tar.gz"
fi

if ${CREATE_BZ2}; then
   echo -n "Creating ${TARDIR}/${TARNAME}.tar.bz2... "
   cp "${TMPDIR}/${TARNAME}.tar" "${TARDIR}" || failed "copy tarball"
   bzip2 --best "${TARDIR}/${TARNAME}.tar" || failed
   echo "done"

   sign "${TARDIR}/${TARNAME}.tar.bz2"
fi

cleanup
