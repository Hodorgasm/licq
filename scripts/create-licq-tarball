#!/bin/bash
#
# Script to create a source tarball from Licq's git repository.
# Latest version: https://github.com/licq-im/licq/blob/master/scripts/
#
# Copyright (c) 2007-2014 Erik Johansson <erijo@licq.org>
# Distributed under the terms of the GNU GPL version 2.
#

### DEFAULT SETTINGS ###

# Detect gnutar if available (BSD tar does not support --owner)
TAR=$(which gnutar)
if [ -z "$TAR" ]; then
    TAR=tar
fi

# Where to save the tarball(s)
TARDIR="."

# What to name the tarball.
# DESC is replaced with the output from git describe.
# Note: Don't add .tar.gz or .tar.bz2
TARNAME="DESC"

# Archives to create (true or false)
CREATE_GZ=false
CREATE_BZ2=false

# Sign archives using default GPG key (true or false)
SIGN=false

# Set extra version to exported revision
EXTRA_VERSION=true

# Which tree to export
TREEISH="HEAD"

# Ownership of files in tarball
OWNER="nobody"
GROUP="nogroup"

# Test build after creating the tarball
TEST_BUILD=false

### END SETTINGS ###

# Prints the usage
function usage()
{
    echo "Usage: $0 (-g | -b) [OPTION]..."
    echo "  -h, --help   This message"
    echo "  -t treeish   Create tarball from treeish (default: ${TREEISH})"
    echo "  -o dir       Save tarball in directory dir (default: ${TARDIR})"
    echo "  -n name      Name the tarball name (default: ${TARNAME})"
    echo "               DESC is replaced with the output from git describe"
    echo "  -e           Don't set extra version (never done for tags)"
    echo "  -g, --gzip   Create a tar.gz archive"
    echo "  -b, --bzip2  Create a tar.bz archive"
    echo "  -s, --sign   Sign archive(s) with default GPG key"
    echo "  --build      Test build after creating the tarball"
    echo ""
    echo "To create a release:"
    echo "$0 -e --bzip2 --gzip --sign -t licq-1.3.9 -n licq-1.3.9 --build"
}

if [ $# -eq 0 ]; then
    echo "$0: Missing required argument (-g and/or -b)"
    echo "Try \`$0 --help' for more information"
    exit 2
fi

# Parse command line options
args=$(getopt -n "$0" -o h,t:,o:,n:,e,g,b,s -l help,gzip,bzip2,sign,build -- $*)
if [ $? -ne 0 ]; then
    echo ""
    usage
    exit 1
fi

set -- $args
while [ $# -gt 0 ]; do
    case $1 in
	-h|--help) usage; exit 0 ;;
	-t) TREEISH=$(eval echo $2); shift ;;
	-o) TARDIR=$(eval echo $2); shift ;;
	-n) TARNAME=$(eval echo $2); shift ;;
	-e) EXTRA_VERSION=false ;;
	-g|--gzip) CREATE_GZ=true ;;
	-b|--bzip2) CREATE_BZ2=true ;;
	-s|--sign) SIGN=true ;;
	--build) TEST_BUILD=true ;;
	--) ;;
	*) echo "$0: unknown option '$1'"; exit 1 ;;
    esac
    shift
done

if ! $CREATE_GZ && ! $CREATE_BZ2 ; then
    echo "$0: You must choose to create a gzip and/or bzip2 archive"
    echo ""
    usage
    exit 1
fi

if ! git rev-parse --verify --quiet "${TREEISH}" > /dev/null; then
    echo "$0: Bad treeish '${TREEISH}'"
    exit 1
fi

if git describe --exact-match "${TREEISH}" &> /dev/null; then
    EXTRA_VERSION=false
fi

# Remove workdir
function cleanup()
{
   if [ -n "${TMPDIR}" ]; then
     echo "Removing ${TMPDIR}"
     rm -rf "${TMPDIR}"
     TMPDIR=""
   fi
}

# Echos "$1 failed" or "failed" and then exits.
function failed()
{
   if [ -z "$1" ]; then
      echo "failed"
   else
      echo "$1 failed"
   fi
   if [ -r "${TMPFILE}" ]; then
      cat "${TMPFILE}"
   fi
   cleanup
   exit 1
}

function abort()
{
   echo "Aborted by user"
   cleanup
   exit 1
}

function run()
{
   "$@" &> "${TMPFILE}" || failed
   rm -f "${TMPFILE}"
}

trap abort SIGHUP SIGINT SIGQUIT

# Workdir/file
TMPDIR=$(mktemp -d licq.XXXX) || failed "mktemp -d"
TMPFILE="$(cd ${TMPDIR} && pwd)/.cmd.out"

GITDESC="$(git describe ${TREEISH})"

function expand_name()
{
    local name="$1"
    name="${name//DESC/${GITDESC}}"
    echo "${name}"
}

DIRNAME="$(expand_name "${TARNAME}")"
TARNAME="$(expand_name "${TARNAME}")"
LICQDIR="${TMPDIR}/${DIRNAME}"

function exit_if_exists()
{
   if [ -e "$1" ]; then
      echo "$1 already exists"
      cleanup
      exit 1
   fi
}

function gitexport()
{
   local path="$1"
   local dest="${LICQDIR}/$2"
   local skip_missing="${3:-false}"

   echo -n "Exporting ${path} ($(git describe --all --long ${TREEISH}))... "
   if ${skip_missing} && ! git rev-parse --verify --quiet "${TREEISH}:${path}" > /dev/null; then
       echo "not found, skipping"
       return
   fi

   run git archive -o "${TMPDIR}/export.tar" ${TREEISH} "${path}"
   run mkdir -p "${dest}"
   run ${TAR} -xf "${TMPDIR}/export.tar" -C "${dest}" --strip-components 1
   run rm "${TMPDIR}/export.tar"
   echo "done"
}

function has_file()
{
   test -e "${LICQDIR}/$1"
}

function makecvs()
{
   echo -n "Running make -f $1/Makefile.cvs... "
   run make -C "${LICQDIR}/$1" -f "Makefile.cvs"
   rm -rf "${LICQDIR}/$1/autom4te.cache"
   rm -f "${LICQDIR}/$1/Makefile.cvs"
   echo "done"
}

${CREATE_GZ}  && exit_if_exists "${TARDIR}/${TARNAME}.tar.gz"
${CREATE_BZ2} && exit_if_exists "${TARDIR}/${TARNAME}.tar.bz2"

gitexport "licq" ""
if has_file "Makefile.cvs"; then
   gitexport "admin" "admin"
   makecvs "."
fi

# Remove symbolic links in plugins dir
if has_file plugins; then
   run find "${LICQDIR}/plugins" -type l -delete
fi

# List of plugins that should be exported. Plugins that no longer are on trunk
# should be listed in OLD_PLUGINS so that this script can continue to work with
# older releases (e.g. the stable branches).
PLUGINS="aosd auto-reply dbus forwarder icq jabber licqweb msn osd qt-gui rms"
OLD_PLUGINS="console email qt4-gui"

for plugin in ${PLUGINS} ${OLD_PLUGINS}; do
   gitexport "${plugin}" "plugins/${plugin}" true
   if has_file "plugins/${plugin}/Makefile.cvs"; then
      if ! has_file "plugins/${plugin}/admin"; then
         gitexport "admin" "plugins/${plugin}/admin"
      fi
      makecvs "plugins/${plugin}"
   fi
done

if ${EXTRA_VERSION}; then
   echo -n "Setting extra version (to -${GITDESC//-/_})..."
   for file in $(find "${LICQDIR}" -name version.cmake -o -name LicqVersion.cmake); do
      sed -i -r -e "s/^(set\(.*_VERSION_EXTRA).*\)/\1 \"-${GITDESC//-/_}\"\)/g" ${file}
   done
   echo "done"
fi

# Cleanup
run find "${LICQDIR}" -name Makefile.common -delete

echo "Creating tarball ${TARNAME}.tar"
${TAR} --owner "${OWNER}" --group "${GROUP}" -C "${TMPDIR}" \
    -cf "${TMPDIR}/${TARNAME}.tar" "${DIRNAME}" || failed

# Test build only handles cmake
if ${TEST_BUILD} && ! has_file "admin"; then
    mkdir "${TMPDIR}/source" "${TMPDIR}/build"
    tar xf "${TMPDIR}/${TARNAME}.tar" -C "${TMPDIR}/source" --strip-components 1 || failed

    echo -n "Running cmake..."
    (cd "${TMPDIR}/build" && run cmake -DCMAKE_INSTALL_PREFIX=../install -DBUILD_PLUGINS=On ../source)
    echo "done"

    echo -n "Compiling (this may take some time)..."
    CCACHE_BASEDIR="$(cd ${TMPDIR} && pwd)" run make -j4 -C "${TMPDIR}/build"
    echo "done"

    echo -n "Installing..."
    run make -C "${TMPDIR}/build" install
    echo "done"

    echo -n "Running licq..."
    run "${TMPDIR}/install/bin/licq" -d 31 -b "${TMPDIR}/basedir" -l icq -l jabber -l msn
    echo "done"
fi

function sign()
{
   if ${SIGN}; then
      echo "Signing $1"
      gpg --sign --armor --detach-sign --output "$1.sign" "$1" || failed "signing"
   fi
}

if ${CREATE_GZ}; then
   echo -n "Creating ${TARDIR}/${TARNAME}.tar.gz... "
   cp "${TMPDIR}/${TARNAME}.tar" "${TARDIR}" || failed "copy tarball"
   gzip --best "${TARDIR}/${TARNAME}.tar" || failed
   echo "done"

   sign "${TARDIR}/${TARNAME}.tar.gz"
fi

if ${CREATE_BZ2}; then
   echo -n "Creating ${TARDIR}/${TARNAME}.tar.bz2... "
   cp "${TMPDIR}/${TARNAME}.tar" "${TARDIR}" || failed "copy tarball"
   bzip2 --best "${TARDIR}/${TARNAME}.tar" || failed
   echo "done"

   sign "${TARDIR}/${TARNAME}.tar.bz2"
fi

cleanup
